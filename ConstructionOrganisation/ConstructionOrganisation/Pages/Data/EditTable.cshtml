@page
@model ConstructionOrganisation.Pages.Data.EditTableModel
@using System.Data
@using System.Web
@{
    ViewData["Title"] = "Редактирование таблицы";

    // Проверка Model на null
    if (Model == null)
    {
        <div class="alert alert-danger">Модель не определена</div>
        return;
    }

    var columns = Model.TableData?.Columns?.Cast<DataColumn>()?.ToList() ?? new List<DataColumn>();
    var rows = Model.TableData?.Rows?.Cast<DataRow>()?.ToList() ?? new List<DataRow>();
    var primaryKeys = Model.PrimaryKeys ?? new List<string>();
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger">@Model.ErrorMessage</div>
}
else if (Model.TableData == null)
{
    <div class="alert alert-warning">Данные таблицы не загружены</div>
}
else
{
    <form method="post" id="editForm">
        @Html.AntiForgeryToken()
        
        <div class="mb-3">
            @if (Model.CanInsert)
            {
                <button id="addRow" type="button" class="btn btn-success">Добавить строку</button>
            }
            @if (Model.CanUpdate || Model.CanInsert || Model.CanDelete)
            {
                <button id="saveChanges" type="button" class="btn btn-primary" disabled>Сохранить изменения</button>
            }
        </div>

        <table class="table table-editable">
            <thead>
                <tr>
                @foreach (DataColumn col in columns)
                {
                    <th>@col.ColumnName</th>
                }
                @if (Model.CanDelete)
                {
                    <th>Действия</th>
                }
                </tr>
            </thead>
            <tbody>
            @foreach (DataRow row in rows)
            {
                <tr data-key="@string.Join("|", primaryKeys.Select(pk => row[pk]))">
                    @foreach (DataColumn col in columns)
                    {
                        <td data-col="@col.ColumnName" data-type="@col.DataType.Name" 
                            data-original="@row[col]" 
                            @(Model.CanUpdate ? "contenteditable=true" : "")>
                            @if (col.DataType == typeof(DateTime))
                            {
                                @(((DateTime)row[col]).ToString("yyyy-MM-dd"))
                            }
                            else
                            {
                                @row[col]
                            }
                        </td>
                    }
                    @if (Model.CanDelete)
                    {
                        <td>
                            <button class="btn btn-danger btn-sm delete-row" type="button">Удалить</button>
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </form>
}

@section Scripts {
    <script>
        // Проверяем, что все необходимые данные доступны
        const canInsert = @(Model?.CanInsert == true ? "true" : "false");
        const canUpdate = @(Model?.CanUpdate == true ? "true" : "false");
        const canDelete = @(Model?.CanDelete == true ? "true" : "false");
        let hasChanges = false;
        
        // Безопасное получение tableName
        const tableName = '@(Model != null ? Html.Raw(HttpUtility.JavaScriptStringEncode(Model.TableName)) : "")';
        const primaryKeys = @(Model != null ? Json.Serialize(Model.PrimaryKeys) : "[]");

        // Инициализация только после полной загрузки DOM
        document.addEventListener('DOMContentLoaded', function() {
            // Проверка наличия необходимых элементов
            if (!tableName) {
                console.error('TableName is not defined');
                return;
            }

            // Отслеживание изменений в ячейках
            const editableCells = document.querySelectorAll('[contenteditable]');
            if (editableCells) {
                editableCells.forEach(function(cell) {
                    cell.addEventListener('input', function() {
                        hasChanges = true;
                        const saveBtn = document.getElementById('saveChanges');
                        if (saveBtn) saveBtn.disabled = !hasChanges;
                    });
                });
            }

            // Обработчик для кнопки добавления строки
            const addRowBtn = document.getElementById('addRow');
            if (addRowBtn && canInsert) {
                addRowBtn.addEventListener('click', addNewRow);
            }

            // Обработчик для кнопки сохранения
            const saveBtn = document.getElementById('saveChanges');
            if (saveBtn) {
                saveBtn.addEventListener('click', saveChanges);
            }

            // Обработчик для кнопок удаления
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('delete-row')) {
                    handleDeleteRow(e.target);
                }
            });
        });

        function addNewRow() {
            const tbody = document.querySelector('tbody');
            if (!tbody) return;

            const cols = @Html.Raw(Json.Serialize(columns.Select(c => c.ColumnName)));
            const colTypes = @Html.Raw(Json.Serialize(columns.Select(c => c.DataType.Name))) || [];

            const newRow = document.createElement('tr');
            let html = '';

            cols.forEach(function(col, i) {
                html += `<td data-col="${col}" data-type="${colTypes[i]}" data-original="" contenteditable="true">`;
                if (colTypes[i] === 'DateTime') {
                    html += new Date().toISOString().split('T')[0];
                }
                html += '</td>';
            });

            if (canDelete) {
                html += '<td><button class="btn btn-danger btn-sm delete-row" type="button">Удалить</button></td>';
            }

            newRow.innerHTML = html;
            tbody.appendChild(newRow);

            // Добавляем обработчики для новых ячеек
            newRow.querySelectorAll('[contenteditable]').forEach(function(cell) {
                cell.addEventListener('input', function() {
                    const saveBtn = document.getElementById('saveChanges');
                    if (saveBtn) saveBtn.disabled = false;
                });
            });

            const saveBtn = document.getElementById('saveChanges');
            if (saveBtn) saveBtn.disabled = false;
        }

        function handleDeleteRow(button) {
            const row = button.closest('tr');
            if (!row) return;

            const rowKey = row.getAttribute('data-key');
            if (rowKey) {
                row.style.display = 'none';
                row.classList.add('deleted');
                hasChanges = true;
                
                const saveBtn = document.getElementById('saveChanges');
                if (saveBtn) saveBtn.disabled = false;
            }
        }

        function saveChanges() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (!token) {
                alert('Ошибка безопасности: токен не найден');
                return;
            }

            const changes = collectChanges();
            if (!changes) return;

            sendChangesToServer(token, changes);
        }

        function collectChanges() {
            const changes = {
                updates: [],
                inserts: [],
                deletes: []
            };

            const allRows = document.querySelectorAll('tbody tr');
            if (!allRows) return null;

            allRows.forEach(function(row) {
                const rowKey = row.getAttribute('data-key');
                const isDeleted = row.classList.contains('deleted');
                const isNew = !rowKey && !isDeleted;

                if (isDeleted && rowKey) {
                    changes.deletes.push({ key: rowKey.split('|') });
                    return;
                }

                if (isNew) {
                    const newRow = {};
                    row.querySelectorAll('td[data-col]').forEach(function(cell) {
                        const colName = cell.getAttribute('data-col');
                        const value = cell.innerText.trim();
                        newRow[colName] = value || null;
                    });
                    changes.inserts.push(newRow);
                    return;
                }

                const updatedRow = { key: rowKey.split('|'), values: {} };
                let rowHasChanges = false;

                row.querySelectorAll('td[data-col]').forEach(function(cell) {
                    const colName = cell.getAttribute('data-col');
                    const originalValue = cell.getAttribute('data-original');
                    const currentValue = cell.innerText.trim();

                    if (currentValue !== originalValue) {
                        updatedRow.values[colName] = currentValue || null;
                        rowHasChanges = true;
                    }
                });

                if (rowHasChanges) {
                    changes.updates.push(updatedRow);
                }
            });

            if (changes.updates.length === 0 && changes.inserts.length === 0 && changes.deletes.length === 0) {
                alert('Нет изменений для сохранения');
                return null;
            }

            return changes;
        }

        function sendChangesToServer(token, changes) {
            const saveBtn = document.getElementById('saveChanges');
            if (!saveBtn) return;

            saveBtn.disabled = true;
            saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Сохранение...';

            fetch('?handler=Save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    tableName: tableName,
                    changes: changes,
                    primaryKeys: primaryKeys
                })
            })
            .then(handleResponse)
            .catch(handleError)
            .finally(resetSaveButton);
        }

        function handleResponse(response) {
            if (!response.ok) {
                return response.json().then(function(err) { 
                    throw new Error(err.message || 'Ошибка сервера'); 
                });
            }
            return response.json();
        }

        function handleError(error) {
            console.error('Ошибка:', error);
            alert('Ошибка сохранения: ' + error.message);
        }

        function resetSaveButton() {
            const saveBtn = document.getElementById('saveChanges');
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Сохранить изменения';
            }
        }
    </script>
}