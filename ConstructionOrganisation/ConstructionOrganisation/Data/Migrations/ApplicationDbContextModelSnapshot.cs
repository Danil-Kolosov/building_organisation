// <auto-generated />
using System;
using ConstructionOrganisation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConstructionOrganisation.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("MySql:CharSet", "utf8mb4")
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConstructionOrganisation.Models.Brigade", b =>
                {
                    b.Property<int>("BrigadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BrigadeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrigadeId"));

                    b.Property<string>("BrigadeName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int?>("Foreman")
                        .HasColumnType("int");

                    b.HasKey("BrigadeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Foreman" }, "Foreman_brigade_idx");

                    b.ToTable("brigade", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.BrigadeEmployee", b =>
                {
                    b.Property<int>("EmployeeCode")
                        .HasColumnType("int");

                    b.Property<int>("BrigadeId")
                        .HasColumnType("int")
                        .HasColumnName("BrigadeID");

                    b.HasKey("EmployeeCode", "BrigadeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "BrigadeId" }, "BrigadeID_brigade_employee_idx");

                    b.HasIndex(new[] { "EmployeeCode" }, "EmployeeCode_UNIQUE")
                        .IsUnique();

                    b.ToTable("brigade_employee", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.CharacteristicGr", b =>
                {
                    b.Property<int>("CharacteristicGrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CharacteristicGrID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacteristicGrId"));

                    b.Property<string>("CharacteristicGrName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("CharacteristicGrId")
                        .HasName("PRIMARY");

                    b.ToTable("characteristic_gr", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.CharacteristicOb", b =>
                {
                    b.Property<int>("CharacteristicObNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CharacteristicObNameID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacteristicObNameId"));

                    b.Property<string>("CharacteristicObName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("CharacteristicObNameId")
                        .HasName("PRIMARY");

                    b.ToTable("characteristic_ob", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Contract", b =>
                {
                    b.Property<int>("ContractNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractNumber"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("ContractNumber")
                        .HasName("PRIMARY");

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeCode"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int?>("GroupNameId")
                        .HasColumnType("int")
                        .HasColumnName("GroupNameID");

                    b.Property<DateOnly?>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("EmployeeCode")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupNameId" }, "GroupNameID_idx");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Estimate", b =>
                {
                    b.Property<int>("WorkNumber")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("MaterialID");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PlannedQuantity")
                        .HasPrecision(9, 3)
                        .HasColumnType("decimal(9,3)");

                    b.Property<decimal?>("RealQuantity")
                        .HasPrecision(10, 3)
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("WorkNumber", "MaterialId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "MaterialId" }, "MaterialID_estimate_idx");

                    b.ToTable("estimate", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Group", b =>
                {
                    b.Property<int>("GroupNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GroupNameID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupNameId"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("GroupNameId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GroupName" }, "GroupName_UNIQUE")
                        .IsUnique();

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.GroupCharacteristic", b =>
                {
                    b.Property<int>("GroupNameId")
                        .HasColumnType("int")
                        .HasColumnName("GroupNameID");

                    b.Property<int>("CharacteristicGrId")
                        .HasColumnType("int")
                        .HasColumnName("CharacteristicGrID");

                    b.Property<string>("ValueGrCh")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("GroupNameId", "CharacteristicGrId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CharacteristicGrId" }, "CharacteristicGrID_idx");

                    b.ToTable("group_characteristic", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Machine", b =>
                {
                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.Property<int?>("MachineTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MachineTypeID");

                    b.Property<int?>("ManagementNumber")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "MachineTypeId" }, "MachineTypeID_machine_idx");

                    b.HasIndex(new[] { "ManagementNumber" }, "ManagementNumber_machine_idx");

                    b.ToTable("machine", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.MachineType", b =>
                {
                    b.Property<int>("MachineTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MachineTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MachineTypeId"));

                    b.Property<string>("MachineType1")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("MachineType");

                    b.HasKey("MachineTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("machine_type", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Management", b =>
                {
                    b.Property<int>("ManagementNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagementNumber"));

                    b.Property<int>("Director")
                        .HasColumnType("int");

                    b.HasKey("ManagementNumber")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Director" }, "Director_UNIQUE")
                        .IsUnique();

                    b.ToTable("management", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaterialID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("MeasurementUnits")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.HasKey("MaterialId")
                        .HasName("PRIMARY");

                    b.ToTable("material", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Object", b =>
                {
                    b.Property<int>("ObjectNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ObjectNameID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectNameId"));

                    b.Property<int?>("ContractNumber")
                        .HasColumnType("int");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int?>("ObjectTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectTypeID");

                    b.Property<int?>("SectionNameId")
                        .HasColumnType("int")
                        .HasColumnName("SectionNameID");

                    b.Property<int?>("Supervisor")
                        .HasColumnType("int");

                    b.HasKey("ObjectNameId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ContractNumber" }, "ContractNumber_object_idx");

                    b.HasIndex(new[] { "ObjectTypeId" }, "ObjectTypeID_object_idx");

                    b.HasIndex(new[] { "SectionNameId" }, "SectionNameID_object_idx");

                    b.HasIndex(new[] { "Supervisor" }, "Supervisor_object_idx");

                    b.ToTable("object", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.ObjectCharacteristic", b =>
                {
                    b.Property<int>("ObjectNameId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectNameID");

                    b.Property<int>("CharacteristicObName")
                        .HasColumnType("int");

                    b.Property<string>("ValueObCh")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("ObjectNameId", "CharacteristicObName")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "CharacteristicObName" }, "CharacteristicObName_object_characteristic_idx");

                    b.ToTable("object_characteristic", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.ObjectType", b =>
                {
                    b.Property<int>("ObjectTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ObjectTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectTypeId"));

                    b.Property<string>("ObjectType1")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("ObjectType");

                    b.HasKey("ObjectTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("object_type", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Section", b =>
                {
                    b.Property<int>("SectionNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SectionNameID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionNameId"));

                    b.Property<int?>("ManagementNumber")
                        .HasColumnType("int");

                    b.Property<int>("Manager")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("SectionNameId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ManagementNumber" }, "ManagementNumberSection_idx");

                    b.HasIndex(new[] { "Manager" }, "ManagerSection_idx");

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.SectionEmployee", b =>
                {
                    b.Property<int>("EmployeeCode")
                        .HasColumnType("int");

                    b.Property<int>("SectionNameId")
                        .HasColumnType("int")
                        .HasColumnName("SectionNameID");

                    b.HasIndex(new[] { "EmployeeCode" }, "EmployeeCode_UNIQUE")
                        .IsUnique();

                    b.ToTable("section_employee", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Work", b =>
                {
                    b.Property<int>("WorkNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkNumber"));

                    b.Property<int?>("BrigadeId")
                        .HasColumnType("int")
                        .HasColumnName("BrigadeID");

                    b.Property<int>("ObjectNameId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectNameID");

                    b.Property<DateOnly>("PlannedEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("PlannedStartDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("RealEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("RealStartDate")
                        .HasColumnType("date");

                    b.Property<int>("SectionNameId")
                        .HasColumnType("int")
                        .HasColumnName("SectionNameID");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int")
                        .HasColumnName("WorkTypeID");

                    b.HasKey("WorkNumber")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BrigadeId" }, "BrigadeID _work_idx");

                    b.HasIndex(new[] { "ObjectNameId" }, "ObjectNameID_work_idx");

                    b.HasIndex(new[] { "SectionNameId" }, "SectionNameID _work_idx");

                    b.HasIndex(new[] { "WorkTypeId" }, "WorkTypeID _work_idx");

                    b.ToTable("work", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.WorkType", b =>
                {
                    b.Property<int>("WorkTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkTypeId"));

                    b.Property<string>("WorkTypeName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("WorkTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("work_type", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WorkMachine", b =>
                {
                    b.Property<int>("WorkNumber")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasColumnType("int");

                    b.HasKey("WorkNumber", "SerialNumber")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "SerialNumber" }, "SerialNumber_work_machine_idx");

                    b.ToTable("work_machine", (string)null);
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Brigade", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Employee", "ForemanNavigation")
                        .WithMany("Brigades")
                        .HasForeignKey("Foreman")
                        .HasConstraintName("Foreman_brigade");

                    b.Navigation("ForemanNavigation");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.BrigadeEmployee", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Brigade", "Brigade")
                        .WithMany("BrigadeEmployees")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BrigadeID_brigade_employee");

                    b.HasOne("ConstructionOrganisation.Models.Employee", "EmployeeCodeNavigation")
                        .WithOne("BrigadeEmployee")
                        .HasForeignKey("ConstructionOrganisation.Models.BrigadeEmployee", "EmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("EmployeeCode_brigade_employee");

                    b.Navigation("Brigade");

                    b.Navigation("EmployeeCodeNavigation");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Employee", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Group", "GroupName")
                        .WithMany("Employees")
                        .HasForeignKey("GroupNameId")
                        .HasConstraintName("GroupNameIDEmployee");

                    b.Navigation("GroupName");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Estimate", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Material", "Material")
                        .WithMany("Estimates")
                        .HasForeignKey("MaterialId")
                        .IsRequired()
                        .HasConstraintName("MaterialID_estimate");

                    b.HasOne("ConstructionOrganisation.Models.Work", "WorkNumberNavigation")
                        .WithMany("Estimates")
                        .HasForeignKey("WorkNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("WorkNumber_estimate");

                    b.Navigation("Material");

                    b.Navigation("WorkNumberNavigation");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.GroupCharacteristic", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.CharacteristicGr", "CharacteristicGr")
                        .WithMany("GroupCharacteristics")
                        .HasForeignKey("CharacteristicGrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CharacteristicGrID");

                    b.HasOne("ConstructionOrganisation.Models.Group", "GroupName")
                        .WithMany("GroupCharacteristics")
                        .HasForeignKey("GroupNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("GroupNameID");

                    b.Navigation("CharacteristicGr");

                    b.Navigation("GroupName");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Machine", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.MachineType", "MachineType")
                        .WithMany("Machines")
                        .HasForeignKey("MachineTypeId")
                        .HasConstraintName("MachineTypeID_machine");

                    b.HasOne("ConstructionOrganisation.Models.Management", "ManagementNumberNavigation")
                        .WithMany("Machines")
                        .HasForeignKey("ManagementNumber")
                        .HasConstraintName("ManagementNumber_machine");

                    b.Navigation("MachineType");

                    b.Navigation("ManagementNumberNavigation");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Management", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Employee", "DirectorNavigation")
                        .WithOne("Management")
                        .HasForeignKey("ConstructionOrganisation.Models.Management", "Director")
                        .IsRequired()
                        .HasConstraintName("ManagementDirector");

                    b.Navigation("DirectorNavigation");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Object", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Contract", "ContractNumberNavigation")
                        .WithMany("Objects")
                        .HasForeignKey("ContractNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ContractNumber_object");

                    b.HasOne("ConstructionOrganisation.Models.ObjectType", "ObjectType")
                        .WithMany("Objects")
                        .HasForeignKey("ObjectTypeId")
                        .HasConstraintName("ObjectTypeID_object");

                    b.HasOne("ConstructionOrganisation.Models.Section", "SectionName")
                        .WithMany("Objects")
                        .HasForeignKey("SectionNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("SectionNameID_object");

                    b.HasOne("ConstructionOrganisation.Models.Employee", "SupervisorNavigation")
                        .WithMany("Objects")
                        .HasForeignKey("Supervisor")
                        .HasConstraintName("Supervisor_object");

                    b.Navigation("ContractNumberNavigation");

                    b.Navigation("ObjectType");

                    b.Navigation("SectionName");

                    b.Navigation("SupervisorNavigation");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.ObjectCharacteristic", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.CharacteristicOb", "CharacteristicObNameNavigation")
                        .WithMany("ObjectCharacteristics")
                        .HasForeignKey("CharacteristicObName")
                        .IsRequired()
                        .HasConstraintName("CharacteristicObName_object_characteristic");

                    b.HasOne("ConstructionOrganisation.Models.Object", "ObjectName")
                        .WithMany("ObjectCharacteristics")
                        .HasForeignKey("ObjectNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ObjectNameID_object_characteristic");

                    b.Navigation("CharacteristicObNameNavigation");

                    b.Navigation("ObjectName");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Section", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Employee", "ManagerNavigation")
                        .WithMany("Sections")
                        .HasForeignKey("Manager")
                        .IsRequired()
                        .HasConstraintName("ManagerSection");

                    b.Navigation("ManagerNavigation");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.SectionEmployee", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Employee", "EmployeeCodeNavigation")
                        .WithOne()
                        .HasForeignKey("ConstructionOrganisation.Models.SectionEmployee", "EmployeeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("EmployeeCode_section_employee");

                    b.Navigation("EmployeeCodeNavigation");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Work", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Brigade", "Brigade")
                        .WithMany("Works")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("BrigadeID_work");

                    b.HasOne("ConstructionOrganisation.Models.Object", "ObjectName")
                        .WithMany("Works")
                        .HasForeignKey("ObjectNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ObjectNameID_work");

                    b.HasOne("ConstructionOrganisation.Models.Section", "SectionName")
                        .WithMany("Works")
                        .HasForeignKey("SectionNameId")
                        .IsRequired()
                        .HasConstraintName("SectionNameID_work");

                    b.HasOne("ConstructionOrganisation.Models.WorkType", "WorkType")
                        .WithMany("Works")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("WorkTypeID_work");

                    b.Navigation("Brigade");

                    b.Navigation("ObjectName");

                    b.Navigation("SectionName");

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConstructionOrganisation.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkMachine", b =>
                {
                    b.HasOne("ConstructionOrganisation.Models.Machine", null)
                        .WithMany()
                        .HasForeignKey("SerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("SerialNumber_work_machine");

                    b.HasOne("ConstructionOrganisation.Models.Work", null)
                        .WithMany()
                        .HasForeignKey("WorkNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("WorkNumber_work_machine");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Brigade", b =>
                {
                    b.Navigation("BrigadeEmployees");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.CharacteristicGr", b =>
                {
                    b.Navigation("GroupCharacteristics");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.CharacteristicOb", b =>
                {
                    b.Navigation("ObjectCharacteristics");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Contract", b =>
                {
                    b.Navigation("Objects");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Employee", b =>
                {
                    b.Navigation("BrigadeEmployee");

                    b.Navigation("Brigades");

                    b.Navigation("Management");

                    b.Navigation("Objects");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Group", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("GroupCharacteristics");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.MachineType", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Management", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Material", b =>
                {
                    b.Navigation("Estimates");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Object", b =>
                {
                    b.Navigation("ObjectCharacteristics");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.ObjectType", b =>
                {
                    b.Navigation("Objects");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Section", b =>
                {
                    b.Navigation("Objects");

                    b.Navigation("Works");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.Work", b =>
                {
                    b.Navigation("Estimates");
                });

            modelBuilder.Entity("ConstructionOrganisation.Models.WorkType", b =>
                {
                    b.Navigation("Works");
                });
#pragma warning restore 612, 618
        }
    }
}
